Resources:
- LookupStackOutputsLogsPolicy:
    Type: iam.Policy
    Properties:
        PolicyName: LogsPolicy
        PolicyDocument:
            Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: 'arn:aws:logs:*:*:*'

- LookupStackOutputsCloudformationPolicy:
    Type: iam.Policy
    Properties:
        PolicyName: CloudformationPolicy
        PolicyDocument:
            Statement:
                - Effect: Allow
                  Action:
                    - 'cloudformation:DescribeStacks'
                  Resource: '*'

- LookupStackOutputsLambdaExecutionRole:
    Type: iam.Role
    Properties:
        AssumeRolePolicyDocument:
            Statement:
                - Effect: Allow
                  Principal:
                    Service:
                        - lambda.amazonaws.com
                  Action:
                      - 'sts:AssumeRole'
        Path: '/'
        Policies:
            - !Ref LookupStackOutputsLogsPolicy
            - !Ref LookupStackOutputsCloudformationPolicy

- LookupStackOutputs:
    Type: awslambda.Function
    Properties:
        Code:
            ZipFile:  !Join  [ "\n",
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                "    if (event.RequestType == 'Delete') {",
                "        response.send(event, context, response.SUCCESS);",
                "        return;",
                "    }",
                "    var stackName = event.ResourceProperties.StackName;",
                "    var responseData = {};",
                "    if (stackName) {",
                "        var aws = require('aws-sdk');",
                "        var cfn = new aws.CloudFormation();",
                "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
                "            if (err) {",
                "                responseData = {Error: 'DescribeStacks call failed'};",
                "                console.log(responseData.Error + ':\\n', err);",
                "                response.send(event, context, response.FAILED, responseData);",
                "            }",
                "            else {",
                "                data.Stacks[0].Outputs.forEach(function(output) {",
                "                    responseData[output.OutputKey] = output.OutputValue;",
                "                });",
                "                response.send(event, context, response.SUCCESS, responseData);",
                "            }",
                "        });",
                "    } else {",
                "        responseData = {Error: 'Stack name not specified'};",
                "        console.log(responseData.Error);",
                "        response.send(event, context, response.FAILED, responseData);",
                "    }",
                "};" ]
    Handler: index.handler
    Runtime: nodejs
    Timeout: 30
    Role: !GetAtt [ LookupStackOutputsLambdaExecutionRole, Arn ]
